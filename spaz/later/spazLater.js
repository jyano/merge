function later() {
//alert
	b.dr = function (dr) {
		alert('b.dr')
		if (U(dr)) {
			return this.direction
		}
		this.direction = dr;
		return this
	}
	i.dr = function (dr) {
		alert('i.dr')
		if (U(dr)) {
			return this.direction
		}
		this.direction = dr;
		return this
	}
	i.nm = function (dr) {
		alret('i.nm')
		if (U(dr)) {
			return this.name
		}
		this.name = dr;
		return this
	}
// Hit testing the screen width, otherwise our sprite would disappear //
// We've reached the right side of our screen
// We need to walk left now to go back to our initial position
//sS.addFlipped(true, false, false)// walk_h has been generated by addFlippedFrames and// contained the right facing animations
//T.f(40)
	ct.reset = function () {
		alert('ct.reset')
		this.St().removeAllChildren()
		T.removeAllListeners()
	}
//sprite.shadow = new createjs.Shadow("#454", 10, 15, 14)
//spriteUrl = "/assets/sprites/metalslug_mummy37x45.png"
//sprite always assumed to start facing right (and flipping it horizontqlly is the left) - so i must draw facing right
	function more() {
		function alertIfUsed() {
			function createStuff() {
				$El = cjs.el = function (a) {
					a = $(a)[0]
					return new cjs.DOMElement(a)
				}
				ELM = function () {
					z()
					d = $.d('r', 400, 400).A($.ip()).drag()
					el = $El(d)
					s = $St('y').t()
					s.A(el)
					// tw(el, [{x:300,y:300},2000])
					// tw([el,'l'],[{r:360, sx:.5, sy:.5},8000],{r:0},[{r:360, sx:1, sy:1},8000])
				}
			}
			
			i.bB = i.bindBody = function (b) {
				alert('i.bindBody i.bB')
				var i = this
				cjs.t(function () {
					b.X(i.X())
					b.Y(i.Y())
					b.rt(i.rt())
				})
				return i
			}
			i.tf = function () {
				alert('i.tf')
				var i = this, g = G(arguments)
				if (g.u) {
					return [
						i.x,
						i.y,
						i.scaleX,
						i.scaleY,
						i.rotation,
						i.skewX,
						i.skewY,
						i.regX,
						i.regY
					]
				}
				if (O(g[0]) && F(g[0].getTransform)) {
					g[0] = g[0].getTransform()
				}
				i.setTransform.apply(i, A(g[0]) ? g[0] : g)
				return i
			}
			i.getTransform = function () {
				alert('i.getTransform')
				var ob = this
				return [
					ob.x, ob.y, ob.scaleX, ob.scaleY,
					ob.rotation, ob.skewX, ob.skewY,
					ob.regX, ob.regY
				]
			}
			i.cu = i.bM = function (cu) {
				alert('i.cu i.bM')
				var ob = this,
						st = ob.st()
				CUob = {
					d: 'default', n: 'none', h: 'help',
					p: 'pointer', ch: 'crosshair',
					P: 'progress', w: 'wait',
					t: 'text',
					m: 'move', g: 'grab', c: 'copy',
					cm: 'context-menu',
					C: 'cell',
					N: 'not-allowed', v: 'not-allowed',
					z: 'zoom-in'
				}
				if (U(cu)) {
					st.MM(function () {
						ob.x = st.m().x;
						ob.y = st.m().y
					})
				}
				else if (S(cu)) {
					ob.cursor = CUob[cu] ? CUob[cu] : cu
				}
				return ob
			}
			cjs.rgb = function (r, g, b, a) {
				alert('cjs.rgb')
				var str
				a = N(a) ? a : 1
				str = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'
				return str
			}
			drawHalf = function (c, i) {
				alert('drawHalf')
				c.dI(i, -i.width / 2, -i.h / 2)
			}
			drag = drg = function (element) {
				alert('drag')
				var q = $b(qq(element).q)
						.css({position: 'absolute'})
						.on('mousedown', function (e) {
							var offset = $(this).offset(),
									deltaX = e.pageX - offset.left, deltaY = e.pageY - offset.top
							$('html').on('mousemove', function (e) {
								q.css({left: e.pageX - deltaX, top: e.pageY - deltaY})
							})
									.on('mouseup', function () {
										$(this).off()
									})
						})
				touchDrg(element)
				return qq(element)
			}
			$.fn.hideOnKeyDown = function (a) {
				alert('$.fn.hideOnKeyDown ')
				var that = this
				$('body').keydown(function (ev) {
					e = ev
					$l(e.which)
					if (e.which == 40) {
						that.hide()
					}
					if (e.which == 38) {
						that.show()
					}
				})
			}
			$.fn.T = function () {
				alert('$.fn.T')
				var d = this, g = G(arguments)
				d.E()
				g.e(function (str) {
					d.A($.h3(str))
				})
				return d
			}
			$.joystick = function () {
				alert('joystick')
				$('#left').on('mousedown mouseover touchenter', function (e) {
					$.K.left = true;
					e.preventDefault()
				})
				$('#left').on('mouseup mouseout touchleave', function () {
					$.K.left = false
				})
				$('#jump').on('mousedown mouseover touchenter', function () {
					$.K.up = true
				})
				$('#jump').on('mouseup mouseout touchleave', function () {
					$.K.up = false
				})
				$('#right').on('mousedown mouseover touchenter', function () {
					$.K.right = true
				})
				$('#right').on('mouseup mouseout touchleave', function () {
					$.K.right = false
				})
			}
			$.fn.toR = $.fn.moveRight = function (num) {
				alert('toL')
				num = num || 20
				if (this.left() == 'auto') {
					this.left(0)
				}
				this.left(parseInt(this.left()) + num)
				return this
			}
			$.fn.toL = $.fn.moveLeft = function (num) {
				alert('toL')
				num = num || 20
				if (this.left() == 'auto') {
					this.left(0)
				}
				this.left(parseInt(this.left()) - num)
				return this
			}
			$.fn.toU = $.fn.moveDown = function (num) {
				alert('toL')
				num = num || 20
				if (this.top() == 'auto') {
					this.top(0)
				}
				this.top(this.top() - num)
				return this
			}
			$.fn.toD = $.fn.moveDown = function (num) {
				alert('toL')
				num = num || 20
				if (this.top() == 'auto') {
					this.top(0)
				}
				this.top(this.top() + num)
				return this
			}
		}
		
		i.warpX = function (lo, hi, cush) {
			alert('i.warpX')
			var i = this,
					wrp = M.wrp(lo, hi, cush)
			T.t(function () {
				i.x = wrp(i.x)
			})
			return i
		}
		i.warpY = function (lo, hi, cush) {
			alert('i.warpY')
			var i = this, wrp = M.wrp(lo, hi, cush)
			T.t(function () {
				i.y = wrp(i.y)
			})
			return i
		}
		i.warp = function (n) {
			var i = this, s = i.S(), n = n || 0
			i.warpX(0, s.W(), n)
			i.warpY(0, s.H(), n)
			return i
		}
	}
	
	b._Sp = function (sp, o) {
		$l('b._Sp')
		this._gx(sp)
		sp.rC()
				.XY(o.x, o.y)
				.sXY(o.sX, o.sY).rt(o.r)
		return sp
	}
	b.Sp = function () {
		$l('b.Sp')
		var g = G(arguments), o,
				sp
		o = $df.xyr({sp: g.f, x: g.s, y: g.t, sX: g[3], sY: g[4], r: g[5]})
		o.sX = N(o.sX, 1);
		o.sY = N(o.sY, o.sX)
		o.sp = o.sp || Mummy
		sp = $Sp(o.sp)
		return b._Sp(sp, o)
	}
	f.ctSp = function (sp) {
		$l('f.ctSp')
		var f = this
		sp.XY(f.pos().x, f.pos().y).rC()
		f.bS($Ct().A(sp))
		return this
	}
	f._bI = function (o) {
		alert('f._bI')
		this.gx.A(
				o.i.sXY(o.sc).XY(o.x, o.y)
						.rt(o.r).al(o.al)
		)
		return this
	}
	f.bI = function () {
		alert('f.bI')
		var f = this, b = f.B(), w = b.W(), g = G(arguments), o
		this.gx = this.gx || w.g.ct()
		o = cjs.iDO(g.f) ? {i: g.f} : g.O ? g.f :
		{i: g.f || 'me', sc: g.s, x: g.t, y: g[3], r: g[4], al: g[5]}
		if (S(o.i)) {
			o.i = Q.b(o.i)
		}
		o.sc = N(o.sc, ( cjs.iH(o.i) ? 1 : .4 ));
		if (!A(o.sc)) {
			o.sc = [o.sc, o.sc]
		}
		$df.xyr(o)
		o.al = N(o.al, 1)
		if (!g.n && !cjs.iH(o.i) && !cjs.iCt(o.i)) {
			o.i.rC()
		}
		return this._bI(o)
	}
	w.dance = function () {
		var w = this
		w.e(function (b) {
			if (b.iD()) {
				b.thr()
			}
		})//w.eD
		return w
	}
	w.txC = function () {
		var w = this
		_.ev(2, function () {
			w.e(function (b) {
				b.fs(function (f) {
					f.C($r())
				})
			})
		})
	}
	w.boxes = function () {
		var w = this, g = G(arguments)
		_.e(g, function (g) {
			w.box.apply(w, g)
		})
		return w
	}
	w.brcks = w.boxesStat = function () {
		var w = this, g = G(arguments)
		_.e(g, function (g) {
			w.brick.apply(w, g)
		})
		return w
	}
	w.ten = w.addTenBalls = function (n) {
		var w = this
		_.t(n || 10, function (i) {
			w.ball(100 + (i * 80), 200)
		})
		return w
	}
	w.hun = w.addHundBalls = function (n) {
		var w = this
		_.t(n || 100, function (i) {
			w.ball(100 + (i * 8), 50, 10)
		})
		return w
	}
}
b._gx = function (a) {
	alert('b._gx')
	this.gx = this.gx || w.gx.ct();
	if (a) {
		this.gx.A(a)
	}
	return this
}
f.initSp = function () {
	alert('initSp')
	this._sp = this._sp || [];
	this.SP = this.SP || [];
	this.sprites = this.sprites || []
	return this
}
f.spritePush = function (j) {
	alert('spritePush')
	this.sprites = this.sprites || []
	this.sprites.push(j)
	return this
}
b.fSp = function () {
	alert('b.fSp')
	return this.f().sprites[0]
}
b._bS = function (sprite, o) {
	alert('b._bS')
	var b = this, w = b.W()
	w.gx.A(sprite)
	T.t(function () {
		sprite
				.XY(b.X() + o.x, b.Y() + o.y)
				.rt(b.rt() + o.rt)
	})
}
/*
 ct.bm = ct.b = function () {
 var ct = this, g = G(arguments), bm,
 o = g.F_ ? {fn: g.s, sc: g.s} :
 g.N_ ? {sc: g.f, fn: g.s} :
 _.x(
 {i: g.f},
 N(g.s) ? {sc: g.s, fn: g.t} :
 {fn: g.s, sc: g.t}
 )
 o.sc = o.sc || 1
 $df.im(o)
 if (O(o.i)) {
 return ct.A($Bm(o.i))
 }//alert('ct.bm O(o.i)'); never alerted
 $.i(o.i, function (i) {
 bm = $Bm(i).a2(ct).sXY(o.sc)
 if (!g.n) {
 bm.rC()
 }
 if (g.p) {
 bm.drag()
 }
 if (o.fn) {
 o.fn(bm)
 }
 })
 return ct
 }

 */
// u might say xTHIS but not thisX? i dont know what i am talking about
/* TICKER
 paused : Indicates whether the ticker is currently paused.
 d       delta :  time since the last tick
 t       time : how much  since T  started
 r      runTime  : how much time has T been running for
 */
/*
 // returns   The average time spent in a tick in milliseconds.
 //This can vary significantly from the value provided by getMeasuredFPS because it only measures the time spent
 // within the tick execution stack.
 Example 1: With a target FPS of 20, getMeasuredFPS()
 returns 20fps, which indicates an average of 50ms between the end of one tick and the end of the next.
 However, getMeasuredTickTime() returns 15ms.
 This indicates i there may be up to 35ms of "idle" time between the end of one tick and the start of the next.

 Example 2: With a target FPS of 30, getFPS() returns 10fps,
 which indicates an average of 100ms between the end of one tick and the end of the next. However,
 getMeasuredTickTime() returns 20ms.
 This would indicate i something other than the tick is using ~80ms
 (another script, DOM rendering, etc).

 */
//w.sp=w.ct=function(x,y){var w=this;return w.hud.ct(x||w.hW,y||w.hH).drag()}
/*
 f.clrSp = function () {
 //$l('clrSp')
 this.sprites = []; //this_sp = []; this.SP = []
 return this
 }
 */